/* NewJava.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. NewJava.java */
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.*;

public class NewJava/*@bgen(jjtree)*/implements NewJavaTreeConstants, NewJavaConstants {/*@bgen(jjtree)*/
  protected static JJTNewJavaState jjtree = new JJTNewJavaState();public static void main(String args[]) throws ParseException {
    String filePath = "exemplo1.jmm";
    String fileContents = fileToString(filePath);
    NewJava myJava = new NewJava(new ByteArrayInputStream(fileContents.getBytes()));
    SimpleNode root = myJava.Program();
    root.dump("");

    System.out.println("F*CK JAS");
  }

  private static String fileToString(String filePath)
  {
    String content = "";

    try
    {
        content = new String ( Files.readAllBytes( Paths.get(filePath) ) );
    }
    catch (IOException e)
    {
        System.out.println(e.toString());
    }

    return content;
  }

  static final public SimpleNode Program() throws ParseException {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ClassDeclaration();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ClassDeclaration() throws ParseException {
    try {
      jj_consume_token(CLASS);
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        jj_consume_token(EXTENDS);
        jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(CURLYBRACKETOPENED);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case BOOLEAN:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        VarDeclaration();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(PUBLIC);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STATIC:{
          MainDeclaration();
          break;
          }
        case INT:
        case BOOLEAN:
        case IDENTIFIER:{
          MethodDeclaration();
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(CURLYBRACKETCLOSED);
    } catch (ParseException e) {
System.out.println(e.toString());
    }
  }

  static final public void VarDeclaration() throws ParseException {Token t;
    try {
      Type();
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
SimpleNode jjtn001 = new SimpleNode(JJTVAR);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                                       jjtc001 = false;
jjtn001.symbol=t.image;
      } finally {
if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001, true);
                                       }
      }
    } catch (ParseException e) {
System.out.println(e.toString());
    }
  }

  static final public void Type() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BRACKETOPEN:{
          jj_consume_token(BRACKETOPEN);
          jj_consume_token(BRACKETCLOSE);
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        break;
        }
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
        break;
        }
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
System.out.println(e.toString());
    }
  }

  static final public void MainDeclaration() throws ParseException {
    try {
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(ROUNDBRACKETOPEN);
      jj_consume_token(STRING);
      jj_consume_token(BRACKETOPEN);
      jj_consume_token(BRACKETCLOSE);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(ROUNDBRACKETCLOSED);
      jj_consume_token(CURLYBRACKETOPENED);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case BOOLEAN:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        VarDeclaration();
      }
      jj_consume_token(CURLYBRACKETCLOSED);
    } catch (ParseException e) {
System.out.println(e.toString());
    }
  }

  static final public void MethodDeclaration() throws ParseException {
    try {
      Type();
      jj_consume_token(IDENTIFIER);
      jj_consume_token(ROUNDBRACKETOPEN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOLEAN:
      case IDENTIFIER:{
        Type();
        jj_consume_token(IDENTIFIER);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          Type();
          jj_consume_token(IDENTIFIER);
        }
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(ROUNDBRACKETCLOSED);
      jj_consume_token(CURLYBRACKETOPENED);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case BOOLEAN:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
        VarDeclaration();
      }
      jj_consume_token(RETURN);
      Expression();
      jj_consume_token(SEMICOLON);
      jj_consume_token(CURLYBRACKETCLOSED);
    } catch (ParseException e) {
System.out.println(e.toString());
    }
  }

  static final public void Expression() throws ParseException {
    try {
      VarTerm();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPERATORS:
      case BRACKETOPEN:
      case FULLSTOP:{
        Expr2();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } catch (ParseException e) {
System.out.println(e.toString());
    }
  }

  static final public void Expr2() throws ParseException {Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FULLSTOP:{
        jj_consume_token(FULLSTOP);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LENGTH:{
          jj_consume_token(LENGTH);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OPERATORS:
          case BRACKETOPEN:
          case FULLSTOP:{
            Expr2();
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            ;
          }
          break;
          }
        case IDENTIFIER:{
          jj_consume_token(IDENTIFIER);
          jj_consume_token(ROUNDBRACKETOPEN);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NOT:
          case ROUNDBRACKETOPEN:
          case TRUE:
          case FALSE:
          case THIS:
          case NEW:
          case INTEGERLITERAL:
          case IDENTIFIER:{
            Expression();
            label_6:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case COMMA:{
                ;
                break;
                }
              default:
                jj_la1[12] = jj_gen;
                break label_6;
              }
              jj_consume_token(COMMA);
              Expression();
            }
            break;
            }
          default:
            jj_la1[13] = jj_gen;
            ;
          }
          jj_consume_token(ROUNDBRACKETCLOSED);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OPERATORS:
          case BRACKETOPEN:
          case FULLSTOP:{
            Expr2();
            break;
            }
          default:
            jj_la1[14] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case OPERATORS:{
        t = jj_consume_token(OPERATORS);
        Expression();
SimpleNode jjtn001 = new SimpleNode(JJTOP);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001,  2);
        jjtc001 = false;
jjtn001.symbol = t.image;
        } finally {
if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
        }
        break;
        }
      case BRACKETOPEN:{
        jj_consume_token(BRACKETOPEN);
        Expression();
        jj_consume_token(BRACKETCLOSE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OPERATORS:
        case BRACKETOPEN:
        case FULLSTOP:{
          Expr2();
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
System.out.println(e.toString());
    }
  }

  static final public void VarTerm() throws ParseException {Token t;Token open = new Token();Token close = new Token();
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGERLITERAL:{
        t = jj_consume_token(INTEGERLITERAL);
SimpleNode jjtn001 = new SimpleNode(JJTVAL);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001, true);
        jjtc001 = false;
jjtn001.symbol = t.image;
        } finally {
if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
        }
        break;
        }
      case IDENTIFIER:{
        t = jj_consume_token(IDENTIFIER);
SimpleNode jjtn002 = new SimpleNode(JJTTEXT);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002, true);
        jjtc002 = false;
jjtn002.symbol = t.image;
        } finally {
if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
        }
        break;
        }
      case TRUE:{
SimpleNode jjtn003 = new SimpleNode(JJTTRUE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(TRUE);
        } finally {
if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
        }
        break;
        }
      case FALSE:{
SimpleNode jjtn004 = new SimpleNode(JJTFALSE);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(FALSE);
        } finally {
if (jjtc004) {
          jjtree.closeNodeScope(jjtn004, true);
        }
        }
        break;
        }
      case THIS:{
SimpleNode jjtn005 = new SimpleNode(JJTTHIS);
        boolean jjtc005 = true;
        jjtree.openNodeScope(jjtn005);
        try {
          jj_consume_token(THIS);
        } finally {
if (jjtc005) {
          jjtree.closeNodeScope(jjtn005, true);
        }
        }
        break;
        }
      case NEW:{
        jj_consume_token(NEW);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:{
          t = jj_consume_token(INT);
          open = jj_consume_token(BRACKETOPEN);
          Expression();
          close = jj_consume_token(BRACKETCLOSE);
SimpleNode jjtn006 = new SimpleNode(JJTNEW);
                                                                            boolean jjtc006 = true;
                                                                            jjtree.openNodeScope(jjtn006);
          try {
jjtree.closeNodeScope(jjtn006,  1);
                                                                            jjtc006 = false;
jjtn006.symbol = t.image;
          } finally {
if (jjtc006) {
                                                                              jjtree.closeNodeScope(jjtn006,  1);
                                                                            }
          }
          break;
          }
        case IDENTIFIER:{
          t = jj_consume_token(IDENTIFIER);
          open = jj_consume_token(ROUNDBRACKETOPEN);
          close = jj_consume_token(ROUNDBRACKETCLOSED);
SimpleNode jjtn007 = new SimpleNode(JJTNEW);
      boolean jjtc007 = true;
      jjtree.openNodeScope(jjtn007);
          try {
jjtree.closeNodeScope(jjtn007, true);
      jjtc007 = false;
jjtn007.symbol = t.image;
          } finally {
if (jjtc007) {
        jjtree.closeNodeScope(jjtn007, true);
      }
          }
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case NOT:{
        jj_consume_token(NOT);
SimpleNode jjtn008 = new SimpleNode(JJTNOT);
              boolean jjtc008 = true;
              jjtree.openNodeScope(jjtn008);
        try {
          Expression();
        } catch (Throwable jjte008) {
if (jjtc008) {
                jjtree.clearNodeScope(jjtn008);
                jjtc008 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte008 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte008;}
              }
              if (jjte008 instanceof ParseException) {
                {if (true) throw (ParseException)jjte008;}
              }
              {if (true) throw (Error)jjte008;}
        } finally {
if (jjtc008) {
                jjtree.closeNodeScope(jjtn008,  1);
              }
        }
        break;
        }
      case ROUNDBRACKETOPEN:{
        jj_consume_token(ROUNDBRACKETOPEN);
        Expression();
SimpleNode jjtn009 = new SimpleNode(JJTBRACKETS);
                                        boolean jjtc009 = true;
                                        jjtree.openNodeScope(jjtn009);
        try {
          jj_consume_token(ROUNDBRACKETCLOSED);
        } finally {
if (jjtc009) {
                                          jjtree.closeNodeScope(jjtn009,  1);
                                        }
        }
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
System.out.println(e.toString());
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public NewJavaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x81000000,0x2000000,0x85000000,0x200,0x81000000,0x81000000,0x1000,0x81000000,0x81000000,0xb00,0xb00,0x1000,0x78c000,0xb00,0x800000,0xb00,0xb00,0x1000000,0x78c000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x2,0x0,0x2,0x0,0x2,0x2,0x0,0x2,0x2,0x0,0x0,0x0,0x3,0x0,0x2,0x0,0x0,0x2,0x3,};
   }

  /** Constructor with InputStream. */
  public NewJava(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NewJava(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NewJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public NewJava(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NewJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public NewJava(NewJavaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(NewJavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
