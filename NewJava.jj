/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. NewJava.jj */
/*@egen*/options {
  LOOKAHEAD=1;
}
PARSER_BEGIN(NewJava)

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.*;

public class NewJava/*@bgen(jjtree)*/implements NewJavaTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTNewJavaState jjtree = new JJTNewJavaState();

/*@egen*/
  public static void main(String args[]) throws ParseException {
    String filePath = "exemplo1.jmm";
    String fileContents = fileToString(filePath);
    NewJava myJava = new NewJava(new ByteArrayInputStream(fileContents.getBytes()));
    SimpleNode root = myJava.Program();
    root.dump("");

    System.out.println("F*CK JAS");
  }

  private static String fileToString(String filePath)
  {
    String content = "";

    try
    {
        content = new String ( Files.readAllBytes( Paths.get(filePath) ) );
    }
    catch (IOException e)
    {
        System.out.println(e.toString());
    }

    return content;
  }
}

PARSER_END(NewJava)
SKIP :
{
  " " | "\r" | "\t" | "\n" | "\n "
}
TOKEN:
{
  < CLASS: "class" >
  | < EXTENDS: "extends" >
  | < OPERATORS: "&&" | "<" | "+" | "-" | "*" | "/" >
  | < BRACKETOPEN: "[" >
  | < BRACKETCLOSE: "]" >
  | < FULLSTOP: "." >
  | < COMMA: "," >
  | < SEMICOLON: ";" >
  | < NOT: "!" >
  | < ROUNDBRACKETOPEN: "(" >
  | < ROUNDBRACKETCLOSED: ")" >
  | < CURLYBRACKETOPENED: "{" >
  | < CURLYBRACKETCLOSED: "}" >
  | < ASSERT: "=">
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < THIS: "this" >
  | < NEW: "new" >
  | < LENGTH: "length" >
  | < INT: "int" >
  | < PUBLIC: "public" >
  | < STATIC: "static" >
  | < VOID: "void" >
  | < MAIN: "main" >
  | < RETURN: "return" >
  | < STRING: "String" >
  | < BOOLEAN: "boolean" >
  | < IF: "if">
  | < ELSE: "else">
  | < WHILE: "while">
  | < INTEGERLITERAL: (["0" - "9"])+ >
  | < IDENTIFIER: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z","_"])* >
}
SimpleNode Program(): {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
  try {
/*@egen*/
  ClassDeclaration() <EOF>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ClassDeclaration()     :  {}
{
  try{
    <CLASS> <IDENTIFIER> (<EXTENDS> <IDENTIFIER>)? <CURLYBRACKETOPENED>(VarDeclaration())*(<PUBLIC> (MainDeclaration()|MethodDeclaration()))*<CURLYBRACKETCLOSED>
  }catch(ParseException e) {
    System.out.println(e.toString());
  }
}

//while (1 < ) ;

void VarDeclaration()     : {Token t;}
{
  try{
    Type() t=<IDENTIFIER> <SEMICOLON>/*@bgen(jjtree) VAR */
                                     {
                                       SimpleNode jjtn001 = new SimpleNode(JJTVAR);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn001, true);
                                       jjtc001 = false;
                                     }
/*@egen*/{
      jjtn001.symbol=t.image;
    }/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001, true);
                                       }
                                     }
/*@egen*/    
  }catch(ParseException e) {
    System.out.println(e.toString());
  }
}

void Type()     : {}
{
  try{
    <INT> [<BRACKETOPEN> <BRACKETCLOSE>]
    | <BOOLEAN>
    | <IDENTIFIER>
  }catch(ParseException e) {
    System.out.println(e.toString());
  }
}

void MainDeclaration()     : {/*@bgen(jjtree) MAIN */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MAIN */
    try {
/*@egen*/
    <STATIC> <VOID> <MAIN> <ROUNDBRACKETOPEN> <STRING> <BRACKETOPEN> <BRACKETCLOSE> <IDENTIFIER> <ROUNDBRACKETCLOSED> <CURLYBRACKETOPENED>
    (LOOKAHEAD(2) VarDeclaration()|Statement())*
    <CURLYBRACKETCLOSED>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodDeclaration()         : {/*@bgen(jjtree) FUNCTION */
                                    SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token name; }
{/*@bgen(jjtree) FUNCTION */
  try {
/*@egen*/
  try{
    Type() name=<IDENTIFIER> <ROUNDBRACKETOPEN> (Type() <IDENTIFIER> (<COMMA> Type() <IDENTIFIER>)*)? <ROUNDBRACKETCLOSED> <CURLYBRACKETOPENED>
    (LOOKAHEAD(2) VarDeclaration()|Statement())*
    <RETURN> Expression() <SEMICOLON> <CURLYBRACKETCLOSED>
    {
      jjtn000.symbol = name.image;
    }
  }catch(ParseException e) {
    System.out.println(e.toString());
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Statement()     :{Token t=new Token();}
{
    <CURLYBRACKETOPENED> (Statement())* <CURLYBRACKETCLOSED>
  | <IF> IfStatement()
  | <WHILE> WhileStatement()
  | <IDENTIFIER> [t=<BRACKETOPEN>  Expression() <BRACKETCLOSE>] <ASSERT> Expression() <SEMICOLON>
}

void IfStatement()     :{}
{
  <ROUNDBRACKETOPEN> Expression() <ROUNDBRACKETCLOSED> Statement() [<ELSE> Statement()]
}

void WhileStatement()     : {}
{

 <ROUNDBRACKETOPEN> Expression() <ROUNDBRACKETCLOSED> Statement()

}

void Expression()     : {}
{
  try{
    VarTerm() [Expr2()]
  }catch(ParseException e) {
    System.out.println(e.toString());
  }
}

void Expr2()     : {Token t;}
{
  try{
    <FULLSTOP> (<LENGTH> [Expr2()] |
    <IDENTIFIER> <ROUNDBRACKETOPEN> [Expression()(<COMMA> Expression())*]  <ROUNDBRACKETCLOSED> [Expr2()])
    | t=<OPERATORS> Expression()/*@bgen(jjtree) #OP( 2) */
      {
        SimpleNode jjtn001 = new SimpleNode(JJTOP);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtc001 = false;
      }
/*@egen*/
      {
        jjtn001.symbol = t.image;
      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
/*@egen*/      
    | <BRACKETOPEN> Expression() <BRACKETCLOSE> [Expr2()]
  }catch(ParseException e) {
    System.out.println(e.toString());
  }
}

void VarTerm()     : {Token t;Token open = new Token();Token close = new Token();}
{
  try{
    t=<INTEGERLITERAL>/*@bgen(jjtree) VAL */
      {
        SimpleNode jjtn001 = new SimpleNode(JJTVAL);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn001, true);
        jjtc001 = false;
      }
/*@egen*/
      {
        jjtn001.symbol = t.image;
      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
/*@egen*/    
    | t=<IDENTIFIER>/*@bgen(jjtree) TEXT */
      {
        SimpleNode jjtn002 = new SimpleNode(JJTTEXT);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn002, true);
        jjtc002 = false;
      }
/*@egen*/
      {
        jjtn002.symbol = t.image;
      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
/*@egen*/     
    |/*@bgen(jjtree) TRUE */
      {
        SimpleNode jjtn003 = new SimpleNode(JJTTRUE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/ <TRUE>/*@bgen(jjtree)*/
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
      }
/*@egen*/      
    |/*@bgen(jjtree) FALSE */
      {
        SimpleNode jjtn004 = new SimpleNode(JJTFALSE);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      }
      try {
/*@egen*/ <FALSE>/*@bgen(jjtree)*/
      } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004, true);
        }
      }
/*@egen*/       
    |/*@bgen(jjtree) THIS */
      {
        SimpleNode jjtn005 = new SimpleNode(JJTTHIS);
        boolean jjtc005 = true;
        jjtree.openNodeScope(jjtn005);
      }
      try {
/*@egen*/ <THIS>/*@bgen(jjtree)*/
      } finally {
        if (jjtc005) {
          jjtree.closeNodeScope(jjtn005, true);
        }
      }
/*@egen*/      
    | <NEW> (t=<INT> open=<BRACKETOPEN> Expression() close=<BRACKETCLOSE>/*@bgen(jjtree) #NEW( 1) */
                                                                          {
                                                                            SimpleNode jjtn006 = new SimpleNode(JJTNEW);
                                                                            boolean jjtc006 = true;
                                                                            jjtree.openNodeScope(jjtn006);
                                                                          }
                                                                          try {
/*@egen*//*@bgen(jjtree)*/
                                                                          {
                                                                            jjtree.closeNodeScope(jjtn006,  1);
                                                                            jjtc006 = false;
                                                                          }
/*@egen*/ {
      jjtn006.symbol = t.image;
    }/*@bgen(jjtree)*/
                                                                          } finally {
                                                                            if (jjtc006) {
                                                                              jjtree.closeNodeScope(jjtn006,  1);
                                                                            }
                                                                          }
/*@egen*/       
    | t=<IDENTIFIER> open=<ROUNDBRACKETOPEN> close=<ROUNDBRACKETCLOSED>/*@bgen(jjtree) NEW */
    {
      SimpleNode jjtn007 = new SimpleNode(JJTNEW);
      boolean jjtc007 = true;
      jjtree.openNodeScope(jjtn007);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn007, true);
      jjtc007 = false;
    }
/*@egen*/
    {
      jjtn007.symbol = t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc007) {
        jjtree.closeNodeScope(jjtn007, true);
      }
    }
/*@egen*/    
    )
    | <NOT>/*@bgen(jjtree) #NOT( 1) */
            {
              SimpleNode jjtn008 = new SimpleNode(JJTNOT);
              boolean jjtc008 = true;
              jjtree.openNodeScope(jjtn008);
            }
            try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
            } catch (Throwable jjte008) {
              if (jjtc008) {
                jjtree.clearNodeScope(jjtn008);
                jjtc008 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte008 instanceof RuntimeException) {
                throw (RuntimeException)jjte008;
              }
              if (jjte008 instanceof ParseException) {
                throw (ParseException)jjte008;
              }
              throw (Error)jjte008;
            } finally {
              if (jjtc008) {
                jjtree.closeNodeScope(jjtn008,  1);
              }
            }
/*@egen*/        
    | <ROUNDBRACKETOPEN> Expression()/*@bgen(jjtree) #BRACKETS( 1) */
                                      {
                                        SimpleNode jjtn009 = new SimpleNode(JJTBRACKETS);
                                        boolean jjtc009 = true;
                                        jjtree.openNodeScope(jjtn009);
                                      }
                                      try {
/*@egen*/ <ROUNDBRACKETCLOSED>/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc009) {
                                          jjtree.closeNodeScope(jjtn009,  1);
                                        }
                                      }
/*@egen*/             
  }catch(ParseException e) {
    System.out.println(e.toString());
  }
}