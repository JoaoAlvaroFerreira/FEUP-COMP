options {
  LOOKAHEAD=2;
}
PARSER_BEGIN(NewJava)

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.*;

public class NewJava
{
  public static int errorCount = 10;

  public static void main(String args[]) throws ParseException {
    String filePath = "exemplo3.jmm";
    String fileContents = fileToString(filePath);
    NewJava myJava = new NewJava(new ByteArrayInputStream(fileContents.getBytes()));
    SimpleNode root = myJava.Program();
    root.dump("");

  }

  private static String fileToString(String filePath)
  {
    String content = "";

    try
    {
        content = new String ( Files.readAllBytes( Paths.get(filePath) ) );
    }
    catch (IOException e)
    {
        System.out.println(e.toString());
    }

    return content;
  }
}

PARSER_END(NewJava)
SKIP :
{
  " " | "\r" | "\t" | "\n" | "\n "
}

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


TOKEN:
{
  < CLASS: "class" >
  | < EXTENDS: "extends" >
  | < OPERATORS: "&&" | "<" | "+" | "-" | "*" | "/" >
  | < BRACKETOPEN: "[" >
  | < BRACKETCLOSE: "]" >
  | < FULLSTOP: "." >
  | < COMMA: "," >
  | < SEMICOLON: ";" >
  | < NOT: "!" >
  | < ROUNDBRACKETOPEN: "(" >
  | < ROUNDBRACKETCLOSED: ")" >
  | < CURLYBRACKETOPENED: "{" >
  | < CURLYBRACKETCLOSED: "}" >
  | < ASSERT: "=">
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < THIS: "this" >
  | < NEW: "new" >
  | < LENGTH: "length" >
  | < INT: "int" >
  | < PUBLIC: "public" >
  | < STATIC: "static" >
  | < VOID: "void" >
  | < MAIN: "main" >
  | < RETURN: "return" >
  | < STRING: "String" >
  | < BOOLEAN: "boolean" >
  | < IF: "if">
  | < ELSE: "else">
  | < WHILE: "while">
  | < INTEGERLITERAL: (["0" - "9"])+ >
  | < IDENTIFIER: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z","_"])* >
}
SimpleNode Program(): {}
{
  ClassDeclaration() <EOF> {return jjtThis;}
}

void ClassDeclaration()#CLASS:  {Token t,ext = new Token();}
{
    <CLASS> t=<IDENTIFIER> (<EXTENDS> ext=<IDENTIFIER>)? <CURLYBRACKETOPENED>(VarDeclaration())*(<PUBLIC> (MainDeclaration()|MethodDeclaration()))*<CURLYBRACKETCLOSED> {
      jjtThis.symbol = t.image;
      if(ext.image != null){
        jjtThis.symbol += " EXTENDS " + ext.image;
      }
    }
}

void VarDeclaration()#VAR: {Token t;}
{
    Type() t=<IDENTIFIER> <SEMICOLON>{
      jjtThis.symbol=t.image;
    }
}

void Type()#TYPE: {Token t;}
{
    (t=<INT> [<BRACKETOPEN> <BRACKETCLOSE>{}]
    | t=<BOOLEAN>
    | t=<IDENTIFIER>)
    {
      jjtThis.symbol = t.image;
    }
}

void MainDeclaration()#MAIN: {}
{
    <STATIC> <VOID> <MAIN> <ROUNDBRACKETOPEN> <STRING> <BRACKETOPEN> <BRACKETCLOSE> <IDENTIFIER> <ROUNDBRACKETCLOSED> <CURLYBRACKETOPENED>
    (VarDeclaration()|Statement())*
    <CURLYBRACKETCLOSED>
}

void MethodDeclaration()#FUNCTION: {Token name,ret,arg1,arg2; }
{
    Type() name=<IDENTIFIER> <ROUNDBRACKETOPEN> ((Type() arg1=<IDENTIFIER>{
      jjtThis.symbol = arg1.image;
    }#VAR(1) (<COMMA> Type() arg2=<IDENTIFIER>{
      jjtThis.symbol = arg2.image;
    }#VAR(1))*)?){

    }#ARGS(3) <ROUNDBRACKETCLOSED> <CURLYBRACKETOPENED>
    (VarDeclaration()|Statement())*
    <RETURN> Expression() <SEMICOLON> <CURLYBRACKETCLOSED>{
    }#RETURN(1)
    {
      jjtThis.symbol = name.image;
    }
}

void Statement()#void:{Token t=new Token();}
{
  <CURLYBRACKETOPENED> (Statement())* <CURLYBRACKETCLOSED>
  | <IF> IfStatement()
  | <WHILE> WhileStatement()
  | Assert()
  | Expression() <SEMICOLON>
}

void Assert() #ASSERT: {Token t;}
{
  AssertAux() <ASSERT> Expression() <SEMICOLON>
}

void AssertAux() #VAR: {Token t;}
{
  t=<IDENTIFIER> [<BRACKETOPEN>  Expression() <BRACKETCLOSE>]{
    jjtThis.symbol = t.image;
  }
}

void IfStatement()#IF:{}
{
  <ROUNDBRACKETOPEN> Expression() <ROUNDBRACKETCLOSED> Statement() ([<ELSE> Statement()]){

  }#ELSE(1)
}

void WhileStatement()#WHILE: {Token t;}
{
  try {
    <ROUNDBRACKETOPEN> Expression() <ROUNDBRACKETCLOSED> Statement()

  } catch (Exception e) {
    e.printStackTrace();

    if(errorCount > 0){
      do{
        t=NewJava.getNextToken();
      }while(t.image != ")");

      errorCount--;

      Statement();
    }

  }

}

void Expression()#void: {Token t = new Token();}
{
    VarTerm() [Expr2()]
}

void Expr2()#void: {Token t;}
{
    FullStop(){}#FULLSTOP(2)
    | t=<OPERATORS> Expression()
      {
        jjtThis.symbol = t.image;
      }#OP(2)
    | <BRACKETOPEN> Expression() <BRACKETCLOSE> [Expr2()]
}

void FullStop()#PAREMETER: {Token t;}
{
  (<FULLSTOP> (t=<LENGTH> [Expr2()] |
  t=<IDENTIFIER> <ROUNDBRACKETOPEN> [Expression()(<COMMA> Expression())*]  <ROUNDBRACKETCLOSED> [Expr2()])){
    jjtThis.symbol = t.image;
  }
}

void VarTerm()#void: {Token t;Token open = new Token();Token close = new Token();}
{
    t=<INTEGERLITERAL>
      {
        jjtThis.symbol = t.image;
      }#VAL
    | t=<IDENTIFIER>
      {
        jjtThis.symbol = t.image;
      }#TEXT
    | <TRUE> #TRUE
    | <FALSE> #FALSE
    | <THIS> #THIS
    | <NEW> (t=<INT> open=<BRACKETOPEN> Expression() close=<BRACKETCLOSE> {
      jjtThis.symbol = t.image;
    }#NEW(1)
    | t=<IDENTIFIER> open=<ROUNDBRACKETOPEN> close=<ROUNDBRACKETCLOSED>
    {
      jjtThis.symbol = t.image;
    }#NEW
    )
    | <NOT> Expression() #NOT(1)
    | <ROUNDBRACKETOPEN> Expression() <ROUNDBRACKETCLOSED> #BRACKETS(1)
}
