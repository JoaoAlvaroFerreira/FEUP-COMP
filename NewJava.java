/* NewJava.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. NewJava.java */
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.*;
import java.util.ArrayList;

public class NewJava/*@bgen(jjtree)*/implements NewJavaTreeConstants, NewJavaConstants {/*@bgen(jjtree)*/
  protected static JJTNewJavaState jjtree = new JJTNewJavaState();public static int errorCount = 10;
  public static SymbolTable table;
  public static String filePath;
  public static SimpleNode root;

  public NewJava(SymbolTable table, String path) {
    this.filePath = path;
    this.table = table;
  }

  public SymbolTable start() throws ParseException{
    NewJava myJava = null;

    System.out.println("Path: " + filePath);

    String fileContents = fileToString(filePath);
    ByteArrayInputStream stream = new ByteArrayInputStream(fileContents.getBytes());

    if (table == null) {
      table = new SymbolTable(filePath);
      myJava = new NewJava(stream);
    } else {
      table= new SymbolTable(filePath);
      myJava.ReInit(stream);
    }


    NewJava.root = myJava.Program();

    NewJava.root.dump("");

    //contrutor  symbol table

    table.startSymbolTable(NewJava.root);

    //Jasmin Generator
    //JasminParser jasminParser = new JasminParser(filePath,root,table);
    //jasminParser.generate();

    return table;


  }

  private static String fileToString(String filePath)
  {
    String content = "";

    try
    {
        content = new String ( Files.readAllBytes( Paths.get(filePath) ) );
    }
    catch (IOException e)
    {
        System.out.println(e.toString());
    }

    return content;
  }

  static final public SimpleNode Program() throws ParseException {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ClassDeclaration();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ClassDeclaration() throws ParseException {/*@bgen(jjtree) CLASS */
                                 SimpleNode jjtn000 = new SimpleNode(JJTCLASS);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token t,ext = new Token();
    try {
      jj_consume_token(CLASS);
      t = jj_consume_token(IDENTIFIER);
      if (jj_2_1(2)) {
        jj_consume_token(EXTENDS);
        ext = jj_consume_token(IDENTIFIER);
SimpleNode jjtn001 = new SimpleNode(JJTEXTENDS);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001, true);
                                                        jjtc001 = false;
jjtn001.symbol = ext.image;
        } finally {
if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                        }
        }
      } else {
        ;
      }
      jj_consume_token(CURLYBRACKETOPENED);
      label_1:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_1;
        }
        VarDeclaration();
      }
      label_2:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(PUBLIC);
        if (jj_2_4(2)) {
          MainDeclaration();
        } else if (jj_2_5(2)) {
          MethodDeclaration();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(CURLYBRACKETCLOSED);
jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                 jjtc000 = false;
jjtn000.symbol = t.image;
      jjtn000.line = t.beginLine;
      jjtn000.column = t.beginColumn;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void VarDeclaration() throws ParseException {/*@bgen(jjtree) VAR */
                            SimpleNode jjtn000 = new SimpleNode(JJTVAR);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      Type();
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
jjtn000.symbol=t.image;
      jjtn000.line = t.beginLine;
      jjtn000.column = t.beginColumn;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Type() throws ParseException {/*@bgen(jjtree) TYPE */
                   SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_6(2)) {
        t = jj_consume_token(INTARRAY);
      } else if (jj_2_7(2)) {
        t = jj_consume_token(INT);
      } else if (jj_2_8(2)) {
        t = jj_consume_token(BOOLEAN);
      } else if (jj_2_9(2)) {
        t = jj_consume_token(IDENTIFIER);
      } else if (jj_2_10(2)) {
        t = jj_consume_token(VOID);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.symbol = t.image;
      jjtn000.line = t.beginLine;
      jjtn000.column = t.beginColumn;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MainDeclaration() throws ParseException {/*@bgen(jjtree) MAIN */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(ROUNDBRACKETOPEN);
      jj_consume_token(STRING);
      jj_consume_token(BRACKETOPEN);
      jj_consume_token(BRACKETCLOSE);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(ROUNDBRACKETCLOSED);
      jj_consume_token(CURLYBRACKETOPENED);
      label_3:
      while (true) {
        if (jj_2_11(2)) {
          ;
        } else {
          break label_3;
        }
        VarDeclaration();
      }
      label_4:
      while (true) {
        if (jj_2_12(2)) {
          ;
        } else {
          break label_4;
        }
        Statement();
      }
      jj_consume_token(CURLYBRACKETCLOSED);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MethodDeclaration() throws ParseException {/*@bgen(jjtree) FUNCTION */
                                    SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Token name,ret;
    try {
      Type();
      name = jj_consume_token(IDENTIFIER);
      jj_consume_token(ROUNDBRACKETOPEN);
      Args();
      jj_consume_token(ROUNDBRACKETCLOSED);
      jj_consume_token(CURLYBRACKETOPENED);
      label_5:
      while (true) {
        if (jj_2_13(2)) {
          ;
        } else {
          break label_5;
        }
        VarDeclaration();
      }
      label_6:
      while (true) {
        if (jj_2_14(2)) {
          ;
        } else {
          break label_6;
        }
        Statement();
      }
      jj_consume_token(RETURN);
      Expression();
      jj_consume_token(SEMICOLON);
      jj_consume_token(CURLYBRACKETCLOSED);
SimpleNode jjtn001 = new SimpleNode(JJTRETURN);
                                                            boolean jjtc001 = true;
                                                            jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  1);
                                                            jjtc001 = false;

      } finally {
if (jjtc001) {
                                                              jjtree.closeNodeScope(jjtn001,  1);
                                                            }
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.symbol = name.image;
      jjtn000.line = name.beginLine;
      jjtn000.column = name.beginColumn;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Args() throws ParseException {/*@bgen(jjtree) ARGS */
                  SimpleNode jjtn000 = new SimpleNode(JJTARGS);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token arg1,arg2;
    try {
      if (jj_2_16(2)) {
        Type();
        arg1 = jj_consume_token(IDENTIFIER);
SimpleNode jjtn001 = new SimpleNode(JJTVAR);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001,  1);
                             jjtc001 = false;
jjtn001.symbol = arg1.image;
    jjtn001.line = arg1.beginLine;
    jjtn001.column = arg1.beginColumn;
        } finally {
if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  1);
                             }
        }
        label_7:
        while (true) {
          if (jj_2_15(2)) {
            ;
          } else {
            break label_7;
          }
          jj_consume_token(COMMA);
          Type();
          arg2 = jj_consume_token(IDENTIFIER);
SimpleNode jjtn002 = new SimpleNode(JJTVAR);
                                              boolean jjtc002 = true;
                                              jjtree.openNodeScope(jjtn002);
          try {
jjtree.closeNodeScope(jjtn002,  1);
                                              jjtc002 = false;
jjtn002.symbol = arg2.image;
    jjtn002.line = arg2.beginLine;
    jjtn002.column = arg2.beginColumn;
          } finally {
if (jjtc002) {
                                                jjtree.closeNodeScope(jjtn002,  1);
                                              }
          }
        }
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Statement() throws ParseException {Token t=new Token();
    if (jj_2_18(2)) {
      jj_consume_token(CURLYBRACKETOPENED);
      label_8:
      while (true) {
        if (jj_2_17(2)) {
          ;
        } else {
          break label_8;
        }
        Statement();
      }
      jj_consume_token(CURLYBRACKETCLOSED);
    } else if (jj_2_19(2)) {
      jj_consume_token(IF);
      IfStatement();
    } else if (jj_2_20(2)) {
      jj_consume_token(ELSE);
      ElseStatement();
    } else if (jj_2_21(2)) {
      jj_consume_token(WHILE);
      WhileStatement();
    } else if (jj_2_22(2)) {
      Assign();
    } else if (jj_2_23(2)) {
      Expression();
      jj_consume_token(SEMICOLON);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Assign() throws ParseException {Token t;
    AssignAux();
    if (jj_2_24(2)) {
      jj_consume_token(ASSIGN);
      Expression();
SimpleNode jjtn001 = new SimpleNode(JJTASSIGN);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  2);
                                      jjtc001 = false;

      } finally {
if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                      }
      }
    } else {
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void AssignAux() throws ParseException {/*@bgen(jjtree) VAR */
                        SimpleNode jjtn000 = new SimpleNode(JJTVAR);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
      if (jj_2_25(2)) {
        jj_consume_token(BRACKETOPEN);
        Expression();
        jj_consume_token(BRACKETCLOSE);
SimpleNode jjtn001 = new SimpleNode(JJTARRINDEX);
                                                              boolean jjtc001 = true;
                                                              jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001,  1);
                                                              jjtc001 = false;

        } finally {
if (jjtc001) {
                                                                jjtree.closeNodeScope(jjtn001,  1);
                                                              }
        }
      } else {
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
                                                                             jjtc000 = false;
jjtn000.symbol = t.image;
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void IfStatement() throws ParseException {/*@bgen(jjtree) IF */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ROUNDBRACKETOPEN);
      Expression();
      jj_consume_token(ROUNDBRACKETCLOSED);
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ElseStatement() throws ParseException {/*@bgen(jjtree) ELSE */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void WhileStatement() throws ParseException {/*@bgen(jjtree) WHILE */
                              SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        jj_consume_token(ROUNDBRACKETOPEN);
        Expression();
        jj_consume_token(ROUNDBRACKETCLOSED);
        Statement();
      } catch (ParseException e) {
System.out.println(e.currentToken.image);

    if(errorCount > 0){
      do{
        t=NewJava.getNextToken();
      }while(t.image != ")");

      errorCount--;

      Statement();
    }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Expression() throws ParseException {Token t = new Token();
    VarTerm();
    if (jj_2_26(2)) {
      Expr2();
    } else {
      ;
    }
  }

  static final public void Expr2() throws ParseException {Token t;
    if (jj_2_30(2)) {
      t = jj_consume_token(AND);
      VarTerm();
      if (jj_2_27(2)) {
        Expr2();
      } else {
        ;
      }
SimpleNode jjtn001 = new SimpleNode(JJTOP2);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  2);
        jjtc001 = false;
jjtn001.symbol = t.image;
        jjtn001.line = t.beginLine;
        jjtn001.column = t.beginColumn;
      } finally {
if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
    } else if (jj_2_31(2)) {
      jj_consume_token(BRACKETOPEN);
      Expression();
      jj_consume_token(BRACKETCLOSE);
      if (jj_2_28(2)) {
        Expr2();
      } else {
        ;
      }
    } else if (jj_2_32(2)) {
      Expr3();
      if (jj_2_29(2)) {
        Expr2();
      } else {
        ;
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expr3() throws ParseException {Token t;
    if (jj_2_35(2)) {
      t = jj_consume_token(MINOR);
      VarTerm();
      if (jj_2_33(2)) {
        Expr3();
      } else {
        ;
      }
SimpleNode jjtn001 = new SimpleNode(JJTOP3);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  2);
        jjtc001 = false;
jjtn001.symbol = t.image;
        jjtn001.line = t.beginLine;
        jjtn001.column = t.beginColumn;
      } finally {
if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
    } else if (jj_2_36(2)) {
      Expr4();
      if (jj_2_34(2)) {
        Expr3();
      } else {
        ;
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expr4() throws ParseException {Token t;
    if (jj_2_39(2)) {
      t = jj_consume_token(OPERATORSLOW);
      VarTerm();
      if (jj_2_37(2)) {
        Expr4();
      } else {
        ;
      }
SimpleNode jjtn001 = new SimpleNode(JJTOP4);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  2);
        jjtc001 = false;
jjtn001.symbol = t.image;
        jjtn001.line = t.beginLine;
        jjtn001.column = t.beginColumn;
      } finally {
if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
    } else if (jj_2_40(2)) {
      Expr5();
      if (jj_2_38(2)) {
        Expr4();
      } else {
        ;
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expr5() throws ParseException {Token t;
    if (jj_2_43(2)) {
      t = jj_consume_token(OPERATORSHIGH);
      VarTerm();
      if (jj_2_41(2)) {
        Expr5();
      } else {
        ;
      }
SimpleNode jjtn001 = new SimpleNode(JJTOP5);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  2);
        jjtc001 = false;
jjtn001.symbol = t.image;
        jjtn001.line = t.beginLine;
        jjtn001.column = t.beginColumn;
      } finally {
if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
    } else if (jj_2_44(2)) {
      Expr6();
      if (jj_2_42(2)) {
        Expr5();
      } else {
        ;
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expr6() throws ParseException {Token t;
    if (jj_2_46(2)) {
      jj_consume_token(NOT);
      VarTerm();
      if (jj_2_45(2)) {
        Expr6();
      } else {
        ;
      }
SimpleNode jjtn001 = new SimpleNode(JJTNOT);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  1);
                             jjtc001 = false;

      } finally {
if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  1);
                             }
      }
    } else if (jj_2_47(2)) {
      Expr7();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expr7() throws ParseException {Token t;
    FullStop();
SimpleNode jjtn001 = new SimpleNode(JJTFULLSTOP);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
    try {
jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;

    } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
    }
  }

  static final public void FullStop() throws ParseException {/*@bgen(jjtree) PAREMETER */
                            SimpleNode jjtn000 = new SimpleNode(JJTPAREMETER);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(FULLSTOP);
      if (jj_2_50(2)) {
        t = jj_consume_token(LENGTH);
      } else if (jj_2_51(2)) {
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(ROUNDBRACKETOPEN);
        if (jj_2_49(2)) {
          Expression();
          label_9:
          while (true) {
            if (jj_2_48(2)) {
              ;
            } else {
              break label_9;
            }
            jj_consume_token(COMMA);
            Expression();
          }
        } else {
          ;
        }
        jj_consume_token(ROUNDBRACKETCLOSED);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
                                                                                                  jjtc000 = false;
jjtn000.symbol = t.image;
    jjtn000.line = t.beginLine;
    jjtn000.column = t.beginColumn;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void VarTerm() throws ParseException {Token t;Token open = new Token();Token close = new Token();
    if (jj_2_54(2)) {
      t = jj_consume_token(INTEGERLITERAL);
SimpleNode jjtn001 = new SimpleNode(JJTVAL);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
        jjtc001 = false;
jjtn001.symbol = t.image;
        jjtn001.line = t.beginLine;
        jjtn001.column = t.beginColumn;
      } finally {
if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
    } else if (jj_2_55(2)) {
      t = jj_consume_token(IDENTIFIER);
      open = jj_consume_token(BRACKETOPEN);
      Expression();
SimpleNode jjtn002 = new SimpleNode(JJTARRINDEX);
                                                       boolean jjtc002 = true;
                                                       jjtree.openNodeScope(jjtn002);
      try {
        close = jj_consume_token(BRACKETCLOSE);
      } finally {
if (jjtc002) {
                                                         jjtree.closeNodeScope(jjtn002,  1);
                                                       }
      }
SimpleNode jjtn003 = new SimpleNode(JJTTEXT);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      try {
jjtree.closeNodeScope(jjtn003,  1);
        jjtc003 = false;
jjtn003.symbol = t.image;
        jjtn003.line = t.beginLine;
        jjtn003.column = t.beginColumn;
      } finally {
if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  1);
        }
      }
    } else if (jj_2_56(2)) {
      t = jj_consume_token(IDENTIFIER);
SimpleNode jjtn004 = new SimpleNode(JJTTEXT);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      try {
jjtree.closeNodeScope(jjtn004, true);
        jjtc004 = false;
jjtn004.symbol = t.image;
        jjtn004.line = t.beginLine;
        jjtn004.column = t.beginColumn;
      } finally {
if (jjtc004) {
          jjtree.closeNodeScope(jjtn004, true);
        }
      }
    } else if (jj_2_57(2)) {
SimpleNode jjtn005 = new SimpleNode(JJTTRUE);
        boolean jjtc005 = true;
        jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(TRUE);
      } finally {
if (jjtc005) {
          jjtree.closeNodeScope(jjtn005, true);
        }
      }
    } else if (jj_2_58(2)) {
SimpleNode jjtn006 = new SimpleNode(JJTFALSE);
        boolean jjtc006 = true;
        jjtree.openNodeScope(jjtn006);
      try {
        jj_consume_token(FALSE);
      } finally {
if (jjtc006) {
          jjtree.closeNodeScope(jjtn006, true);
        }
      }
    } else if (jj_2_59(2)) {
SimpleNode jjtn007 = new SimpleNode(JJTTHIS);
        boolean jjtc007 = true;
        jjtree.openNodeScope(jjtn007);
      try {
        jj_consume_token(THIS);
      } finally {
if (jjtc007) {
          jjtree.closeNodeScope(jjtn007, true);
        }
      }
    } else if (jj_2_60(2)) {
      jj_consume_token(NEW);
      if (jj_2_52(2)) {
        t = jj_consume_token(INT);
        open = jj_consume_token(BRACKETOPEN);
        Expression();
        close = jj_consume_token(BRACKETCLOSE);
SimpleNode jjtn008 = new SimpleNode(JJTNEW);
                                                                            boolean jjtc008 = true;
                                                                            jjtree.openNodeScope(jjtn008);
        try {
jjtree.closeNodeScope(jjtn008,  1);
                                                                            jjtc008 = false;
jjtn008.symbol = "int[]";
      jjtn008.line = t.beginLine;
      jjtn008.column = t.beginColumn;
        } finally {
if (jjtc008) {
                                                                              jjtree.closeNodeScope(jjtn008,  1);
                                                                            }
        }
      } else if (jj_2_53(2)) {
        t = jj_consume_token(IDENTIFIER);
        open = jj_consume_token(ROUNDBRACKETOPEN);
        close = jj_consume_token(ROUNDBRACKETCLOSED);
SimpleNode jjtn009 = new SimpleNode(JJTNEW);
      boolean jjtc009 = true;
      jjtree.openNodeScope(jjtn009);
        try {
jjtree.closeNodeScope(jjtn009, true);
      jjtc009 = false;
jjtn009.symbol = t.image;
      jjtn009.line = t.beginLine;
      jjtn009.column = t.beginColumn;
        } finally {
if (jjtc009) {
        jjtree.closeNodeScope(jjtn009, true);
      }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_61(2)) {
      Expr6();
    } else if (jj_2_62(2)) {
      jj_consume_token(ROUNDBRACKETOPEN);
      Expression();
      jj_consume_token(ROUNDBRACKETCLOSED);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static private boolean jj_2_60(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  static private boolean jj_2_61(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  static private boolean jj_2_62(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_scan_token(INTARRAY)) return true;
    return false;
  }

  static private boolean jj_3_56()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_55()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(BRACKETOPEN)) return true;
    return false;
  }

  static private boolean jj_3R_10()
 {
    if (jj_3R_14()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_50()
 {
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3_54()
 {
    if (jj_scan_token(INTEGERLITERAL)) return true;
    return false;
  }

  static private boolean jj_3_45()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_41()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_51()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ROUNDBRACKETOPEN)) return true;
    return false;
  }

  static private boolean jj_3R_28()
 {
    if (jj_scan_token(FULLSTOP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) return true;
    }
    return false;
  }

  static private boolean jj_3_28()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_37()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_26()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_42()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_47()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) return true;
    }
    return false;
  }

  static private boolean jj_3_46()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_38()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_44()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_33()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_40()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) return true;
    }
    return false;
  }

  static private boolean jj_3_43()
 {
    if (jj_scan_token(OPERATORSHIGH)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_34()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    return false;
  }

  static private boolean jj_3_39()
 {
    if (jj_scan_token(OPERATORSLOW)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_36()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_27()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_29()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    return false;
  }

  static private boolean jj_3_35()
 {
    if (jj_scan_token(MINOR)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_32()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_31()
 {
    if (jj_scan_token(BRACKETOPEN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_26()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_30()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(PUBLIC)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_scan_token(ROUNDBRACKETOPEN)) return true;
    return false;
  }

  static private boolean jj_3_25()
 {
    if (jj_scan_token(BRACKETOPEN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_15()
 {
    if (jj_scan_token(ROUNDBRACKETOPEN)) return true;
    return false;
  }

  static private boolean jj_3_24()
 {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_17()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_27()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_23()
 {
    if (jj_3R_19()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_22()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_21()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_20()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_19()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_15()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_18()
 {
    if (jj_scan_token(CURLYBRACKETOPENED)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CURLYBRACKETCLOSED)) return true;
    return false;
  }

  static private boolean jj_3R_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_14()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_12()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_16()
 {
    if (jj_3R_14()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_13()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_62()
 {
    if (jj_scan_token(ROUNDBRACKETOPEN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_48()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_61()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_12()
 {
    if (jj_3R_14()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_52()
 {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(BRACKETOPEN)) return true;
    return false;
  }

  static private boolean jj_3_11()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_53()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ROUNDBRACKETOPEN)) return true;
    return false;
  }

  static private boolean jj_3R_11()
 {
    if (jj_scan_token(STATIC)) return true;
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  static private boolean jj_3_59()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3_60()
 {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) return true;
    }
    return false;
  }

  static private boolean jj_3_49()
 {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_58()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3_57()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public NewJavaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[62];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public NewJava(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NewJava(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NewJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public NewJava(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NewJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public NewJava(NewJavaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(NewJavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[49];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 62; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
