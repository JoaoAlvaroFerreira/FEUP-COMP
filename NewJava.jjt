options {
  LOOKAHEAD=2;
}
PARSER_BEGIN(NewJava)

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.*;

public class NewJava
{
  public static void main(String args[]) throws ParseException {
    String filePath = "exemplo1.jmm";
    String fileContents = fileToString(filePath);
    NewJava myJava = new NewJava(new ByteArrayInputStream(fileContents.getBytes()));
    SimpleNode root = myJava.Program();
    root.dump("");

    System.out.println("F*CK JAS");
  }

  private static String fileToString(String filePath)
  {
    String content = "";

    try
    {
        content = new String ( Files.readAllBytes( Paths.get(filePath) ) );
    }
    catch (IOException e)
    {
        e.printStackTrace();
    }

    return content;
  }
}

PARSER_END(NewJava)
SKIP :
{
  " " | "\r" | "\t" | "\n" | "\n "
}
TOKEN:
{
  < CLASS: "class" >
  | < EXTENDS: "extends" >
  | < OPERATORS: "&&" | "<" | "+" | "-" | "*" | "/" >
  | < BRACKETOPEN: "[" >
  | < BRACKETCLOSE: "]" >
  | < FULLSTOP: "." >
  | < COMMA: "," >
  | < SEMICOLON: ";" >
  | < NOT: "!" >
  | < ROUNDBRACKETOPEN: "(" >
  | < ROUNDBRACKETCLOSED: ")" >
  | < CURLYBRACKETOPENED: "{" >
  | < CURLYBRACKETCLOSED: "}" >
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < THIS: "this" >
  | < NEW: "new" >
  | < LENGTH: "length" >
  | < INT: "int" >
  | < PUBLIC: "public" >
  | < STATIC: "static" >
  | < VOID: "void" >
  | < MAIN: "main" >
  | < RETURN: "return" >
  | < STRING: "String" >
  | < BOOLEAN: "boolean" >
  | < INTEGERLITERAL: (["0" - "9"])+ >
  | < IDENTIFIER: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z","_"])* >
}
SimpleNode Program(): {}
{
  ClassDeclaration() <EOF> {return jjtThis;}
}

void ClassDeclaration()#void:  {}
{
  <CLASS> <IDENTIFIER> (<EXTENDS> <IDENTIFIER>)? <CURLYBRACKETOPENED>(VarDeclaration())*(MainDeclaration()|MethodDeclaration())*<CURLYBRACKETCLOSED>
}

void VarDeclaration()#void: {}
{
  Type() <IDENTIFIER> <SEMICOLON>
}

void Type()#void: {}
{
  <INT> <BRACKETOPEN> <BRACKETCLOSE>
  | <BOOLEAN>
  | <INT>
//  | Expression()
}

void MainDeclaration()#void: {}
{
  <PUBLIC> <STATIC> <VOID> <MAIN> <ROUNDBRACKETOPEN> <STRING> <BRACKETOPEN> <BRACKETCLOSE> <IDENTIFIER> <ROUNDBRACKETCLOSED> <CURLYBRACKETOPENED>(VarDeclaration())*/*(Statement())**/<CURLYBRACKETCLOSED>
}

void MethodDeclaration()#void: {}
{
  <PUBLIC> Type() <IDENTIFIER> <ROUNDBRACKETOPEN> (Type() <IDENTIFIER> (<COMMA> Type() <IDENTIFIER>)*)? <ROUNDBRACKETCLOSED> <CURLYBRACKETOPENED> (VarDeclaration())* /*(Statement())**/ <RETURN> /*Expression()*/ <SEMICOLON> <CURLYBRACKETCLOSED>
}
