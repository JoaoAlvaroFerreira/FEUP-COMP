/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ExpressionParsing.jj */
/*@egen*/options {
  LOOKAHEAD=1;
}

PARSER_BEGIN(ExpressionParsing)

public class ExpressionParsing/*@bgen(jjtree)*/implements ExpressionParsingTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTExpressionParsingState jjtree = new JJTExpressionParsingState();

/*@egen*/
  public static void main(String args[]) throws ParseException {
    NewJava myJava = new NewJava(System.in);
    SimpleNode root = myJava.Expression();
    root.dump("");

    System.out.println("F*CK JAS");
  }
}

PARSER_END(ExpressionParsing)

SKIP :
{
  " " | "\r" | "\t"
}
TOKEN:
{
  < OPERATORS: "&&" | "<" | "+" | "-" | "*" | "/" >  
  | < BRACKETOPEN: "[" >
  | < BRACKETCLOSE: "]" >
  | < FULLSTOP: "." >
  | < COMMA: "," >
  | < NOT: "!" >
  | < ROUNDBRACKETOPEN: "(" >
  | < ROUNDBRACKETCLOSED: ")" >
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < THIS: "this" >
  | < NEW: "new" >
  | < LENGTH: "length" >
  | < INTEGERLITERAL: (["0" - "9"])+ >  
  | < IDENTIFIER: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z","_"])* >
  | < LF: "\n" >
}
SimpleNode Expression(): {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  <INTEGERLITERAL> <OPERATORS> <INTEGERLITERAL> <LF>/*@bgen(jjtree)*/
                                                     {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtc000 = false;
                                                     }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}