options
{
 LOOKAHEAD=1;
}
PARSER_BEGIN(Statements)
public class Statements
{
 public static void main(String args[]) throws ParseException {
Statements myState = new Statements(System.in);
SimpleNode root = Statements.Expression(); // returns reference to root node

root.dump(""); // prints the tree on the screen

 }
}
PARSER_END(Statements)
SKIP :
{
“ “ | "\r" | "\t"
}

TOKEN /* SPACE */:{
    
| < LF: "\n" >
}

TOKEN /* SEPARATORS */:
{
 < CURLYLEFT: "{"
 < CURLYRIGHT: "}"
 < PARENTHESISLEFT: "("
 < PARENTHESISRIGHT: ")"
 < BRACKETLEFT: "["
 < BRACKETRIGHT: "]"
 < SEMICOLON: ";"
}

TOKEN /* CONDITIONAL OPERATORS */:
{
 < ASSIGN: "="
 < EQUALS: "=="
 < IF: "if"
 < ELSE: "else"
 < WHILE: "while"
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
    | < LETTER: ["_","a"-"z","A"-"Z"] >
    | < DIGIT: ["0"-"9"] >
}

SimpleNode Start() : {} 
{
  Statement()
  { return jjtThis; }
}


void Statement():{}
{
  LOOKAHEAD(2)
  Block() |  EmptyStatement | IfStatement() | WhileStatement()

}

void Assignement():{}
{
  AssignementBasic()|AssignementExpressions()
}

void AssignementBasic():{}
{
  <IDENTIFIER> <ASSIGN> Expression()
}

void AssignementExpressions(): {}
{
  <IDENTIFIER> <BRACKETLEFT> Expression <BRACKETRIGHT>  <ASSIGN> Expression()
}
void BasicStatement(): {}
{
  Expression() <SEMICOLON>
}

void IfStatement() :
{}
{
  <IF> "(" Expression() ")" Statement() [ LOOKAHEAD(1) <ELSE> Statement() ]
}

void WhileStatement(): {}
{

 <WHILE> "(" Expression() ")" Statement()

}
void EmptyStatement() :
{}
{
  ";"
}

void Expression(): {} /* Este fizeram vocês, é só meter um | Assignement() acho */
{
 Assignement()
}

