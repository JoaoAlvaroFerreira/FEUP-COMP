/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. NewJava.jj */
/*@egen*/options {
  LOOKAHEAD=2;
}
PARSER_BEGIN(NewJava)

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.*;
import java.util.ArrayList;

public class NewJava/*@bgen(jjtree)*/implements NewJavaTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTNewJavaState jjtree = new JJTNewJavaState();

/*@egen*/
  public static int errorCount = 10;
  public static SymbolTable table;
  public static String filePath;

  public NewJava(SymbolTable table, String path) {
    this.filePath = path;
    this.table = table;
  }

  public SymbolTable start() throws ParseException{
    NewJava myJava = null;

    System.out.println("Path: " + filePath);

    String fileContents = fileToString(filePath);
    ByteArrayInputStream stream = new ByteArrayInputStream(fileContents.getBytes());
    
    if (table == null){
      table = new SymbolTable();
      myJava = new NewJava(stream);
    }else{
      myJava.ReInit(stream);
    }

    SimpleNode root = myJava.Program();

    root.dump("");

    //contrutor  symbol table
    table.startSymbolTable(root);

    return table;

    //Jasmin Generator
    //JasminParser jasminParser = new JasminParser("test");
    //jasminParser.generate();
  }

  private static String fileToString(String filePath)
  {
    String content = "";

    try
    {
        content = new String ( Files.readAllBytes( Paths.get(filePath) ) );
    }
    catch (IOException e)
    {
        System.out.println(e.toString());
    }

    return content;
  }
}

PARSER_END(NewJava)
SKIP :
{
  " " | "\r" | "\t" | "\n" | "\n "
}

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


TOKEN:
{
  < CLASS: "class" >
  | < EXTENDS: "extends" >
  | < AND: "&&">
  | < MINOR: "<">
  | < OPERATORSLOW: "+" | "-" >
  | < OPERATORSHIGH: "*" | "/" >
  | < BRACKETOPEN: "[" >
  | < BRACKETCLOSE: "]" >
  | < FULLSTOP: "." >
  | < COMMA: "," >
  | < SEMICOLON: ";" >
  | < NOT: "!" >
  | < ROUNDBRACKETOPEN: "(" >
  | < ROUNDBRACKETCLOSED: ")" >
  | < CURLYBRACKETOPENED: "{" >
  | < CURLYBRACKETCLOSED: "}" >
  | < ASSIGN: "=">
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < THIS: "this" >
  | < NEW: "new" >
  | < LENGTH: "length" >
  | < INT: "int" >
  | < PUBLIC: "public" >
  | < STATIC: "static" >
  | < VOID: "void" >
  | < MAIN: "main" >
  | < RETURN: "return" >
  | < BOOLEAN: "boolean" >
  | < IF: "if">
  | < ELSE: "else">
  | < WHILE: "while">
  | < STRING: "String" >
  | < INTEGERLITERAL: (["0" - "9"])+ >
  | < IDENTIFIER: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z","_"])* >
}
SimpleNode Program(): {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
  try {
/*@egen*/
  ClassDeclaration() <EOF>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ClassDeclaration()      :  {/*@bgen(jjtree) CLASS */
                                 SimpleNode jjtn000 = new SimpleNode(JJTCLASS);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t,ext = new Token();}
{/*@bgen(jjtree) CLASS */
    try {
/*@egen*/
    <CLASS> t=<IDENTIFIER> (<EXTENDS> ext=<IDENTIFIER>/*@bgen(jjtree) EXTENDS */
                                                      {
                                                        SimpleNode jjtn001 = new SimpleNode(JJTEXTENDS);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
                                                      }
                                                      try {
/*@egen*//*@bgen(jjtree)*/
                                                      {
                                                        jjtree.closeNodeScope(jjtn001, true);
                                                        jjtc001 = false;
                                                      }
/*@egen*/{jjtn001.symbol = ext.image;}/*@bgen(jjtree)*/
                                                      } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                        }
                                                      }
/*@egen*/        )? <CURLYBRACKETOPENED>(VarDeclaration())*(<PUBLIC> (MainDeclaration() | MethodDeclaration()))*<CURLYBRACKETCLOSED>/*@bgen(jjtree)*/
                                                                                                                                                                                                               {
                                                                                                                                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                 jjtc000 = false;
                                                                                                                                                                                                               }
/*@egen*/ {
      jjtn000.symbol = t.image;
      jjtn000.line = t.beginLine;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarDeclaration()    : {/*@bgen(jjtree) VAR */
                            SimpleNode jjtn000 = new SimpleNode(JJTVAR);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) VAR */
    try {
/*@egen*/
    Type() t=<IDENTIFIER> <SEMICOLON>/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/{
      jjtn000.symbol=t.image;
      jjtn000.line = t.beginLine;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Type()     : {/*@bgen(jjtree) TYPE */
                   SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) TYPE */
    try {
/*@egen*/
    ( t=<INT> [<BRACKETOPEN> <BRACKETCLOSE>{}]
    | t=<BOOLEAN>
    | t=<IDENTIFIER>
    | t=<VOID>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      jjtn000.symbol = t.image;
      jjtn000.line = t.beginLine;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MainDeclaration()     : {/*@bgen(jjtree) MAIN */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MAIN */
    try {
/*@egen*/
    <STATIC> <VOID> <MAIN> <ROUNDBRACKETOPEN> <STRING> <BRACKETOPEN> <BRACKETCLOSE> <IDENTIFIER> <ROUNDBRACKETCLOSED> <CURLYBRACKETOPENED>
    (VarDeclaration())* (Statement())*
    <CURLYBRACKETCLOSED>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodDeclaration()         : {/*@bgen(jjtree) FUNCTION */
                                    SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token name,ret; }
{/*@bgen(jjtree) FUNCTION */
    try {
/*@egen*/
    Type() name=<IDENTIFIER> <ROUNDBRACKETOPEN>
    Args()
     <ROUNDBRACKETCLOSED> <CURLYBRACKETOPENED>
    (VarDeclaration())*(Statement())*
    <RETURN> Expression() <SEMICOLON> <CURLYBRACKETCLOSED>/*@bgen(jjtree) #RETURN( 1) */
                                                          {
                                                            SimpleNode jjtn001 = new SimpleNode(JJTRETURN);
                                                            boolean jjtc001 = true;
                                                            jjtree.openNodeScope(jjtn001);
                                                          }
                                                          try {
/*@egen*//*@bgen(jjtree)*/
                                                          {
                                                            jjtree.closeNodeScope(jjtn001,  1);
                                                            jjtc001 = false;
                                                          }
/*@egen*/{
    }/*@bgen(jjtree)*/
                                                          } finally {
                                                            if (jjtc001) {
                                                              jjtree.closeNodeScope(jjtn001,  1);
                                                            }
                                                          }
/*@egen*/          /*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      jjtn000.symbol = name.image;
      jjtn000.line = name.beginLine;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Args()     :{/*@bgen(jjtree) ARGS */
                  SimpleNode jjtn000 = new SimpleNode(JJTARGS);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token arg1,arg2;}
{/*@bgen(jjtree) ARGS */
  try {
/*@egen*/
  (Type() arg1=<IDENTIFIER>/*@bgen(jjtree) #VAR( 1) */
                           {
                             SimpleNode jjtn001 = new SimpleNode(JJTVAR);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn001,  1);
                             jjtc001 = false;
                           }
/*@egen*/{
    jjtn001.symbol = arg1.image;
    jjtn001.line = arg1.beginLine;
  }/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  1);
                             }
                           }
/*@egen*/        (<COMMA> Type() arg2=<IDENTIFIER>/*@bgen(jjtree) #VAR( 1) */
                                            {
                                              SimpleNode jjtn002 = new SimpleNode(JJTVAR);
                                              boolean jjtc002 = true;
                                              jjtree.openNodeScope(jjtn002);
                                            }
                                            try {
/*@egen*//*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn002,  1);
                                              jjtc002 = false;
                                            }
/*@egen*/{
    jjtn002.symbol = arg2.image;
    jjtn002.line = arg2.beginLine;
  }/*@bgen(jjtree)*/
                                            } finally {
                                              if (jjtc002) {
                                                jjtree.closeNodeScope(jjtn002,  1);
                                              }
                                            }
/*@egen*/       )*)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Statement()     :{Token t=new Token();}
{
  <CURLYBRACKETOPENED> (Statement())* <CURLYBRACKETCLOSED>
  | <IF> IfStatement()
  | <WHILE> WhileStatement()
  | Assign()
  | Expression() <SEMICOLON>
}

void Assign()      : {Token t;}
{
  AssignAux() [<ASSIGN> Expression()/*@bgen(jjtree) #ASSIGN( 2) */
                                    {
                                      SimpleNode jjtn001 = new SimpleNode(JJTASSIGN);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                      jjtc001 = false;
                                    }
/*@egen*/{}/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                      }
                                    }
/*@egen*/          ] <SEMICOLON>
}

void AssignAux()     : {/*@bgen(jjtree) VAR */
                        SimpleNode jjtn000 = new SimpleNode(JJTVAR);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) VAR */
  try {
/*@egen*/
  t=<IDENTIFIER> [<BRACKETOPEN>  Expression() <BRACKETCLOSE>/*@bgen(jjtree) #ARRINDEX( 1) */
                                                            {
                                                              SimpleNode jjtn001 = new SimpleNode(JJTARRINDEX);
                                                              boolean jjtc001 = true;
                                                              jjtree.openNodeScope(jjtn001);
                                                            }
                                                            try {
/*@egen*//*@bgen(jjtree)*/
                                                            {
                                                              jjtree.closeNodeScope(jjtn001,  1);
                                                              jjtc001 = false;
                                                            }
/*@egen*/{}/*@bgen(jjtree)*/
                                                            } finally {
                                                              if (jjtc001) {
                                                                jjtree.closeNodeScope(jjtn001,  1);
                                                              }
                                                            }
/*@egen*/            ]/*@bgen(jjtree)*/
                                                                           {
                                                                             jjtree.closeNodeScope(jjtn000, true);
                                                                             jjtc000 = false;
                                                                           }
/*@egen*/{
    jjtn000.symbol = t.image;
    jjtn000.line = t.beginLine;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IfStatement()   :{/*@bgen(jjtree) IF */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IF */
  try {
/*@egen*/
  <ROUNDBRACKETOPEN> Expression() <ROUNDBRACKETCLOSED> Statement() ([<ELSE> Statement()])/*@bgen(jjtree) #ELSE( 1) */
                                                                                         {
                                                                                           SimpleNode jjtn001 = new SimpleNode(JJTELSE);
                                                                                           boolean jjtc001 = true;
                                                                                           jjtree.openNodeScope(jjtn001);
                                                                                         }
                                                                                         try {
/*@egen*//*@bgen(jjtree)*/
                                                                                         {
                                                                                           jjtree.closeNodeScope(jjtn001,  1);
                                                                                           jjtc001 = false;
                                                                                         }
/*@egen*/{

  }/*@bgen(jjtree)*/
                                                                                         } finally {
                                                                                           if (jjtc001) {
                                                                                             jjtree.closeNodeScope(jjtn001,  1);
                                                                                           }
                                                                                         }
/*@egen*/        /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WhileStatement()      : {/*@bgen(jjtree) WHILE */
                              SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) WHILE */
  try {
/*@egen*/
  try {
    <ROUNDBRACKETOPEN> Expression() <ROUNDBRACKETCLOSED> Statement()

  } catch (ParseException e) {
    //e.printStackTrace();
    System.out.println("N\u00e3o sabes fazer whiles? " + e.currentToken.image);



    if(errorCount > 0){
      do{
        t=NewJava.getNextToken();
      }while(t.image != ")");

      errorCount--;

      Statement();
    }

  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void Expression()     : {Token t = new Token();}
{
    VarTerm() [Expr2()]
}

void Expr2()     : {Token t;}
{
    FullStop()/*@bgen(jjtree) #FULLSTOP( 2) */
              {
                SimpleNode jjtn001 = new SimpleNode(JJTFULLSTOP);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn001,  2);
                jjtc001 = false;
              }
/*@egen*/{}/*@bgen(jjtree)*/
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/            
    | t=<AND> VarTerm() [Expr2()]/*@bgen(jjtree) #OP2( 2) */
      {
        SimpleNode jjtn002 = new SimpleNode(JJTOP2);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn002,  2);
        jjtc002 = false;
      }
/*@egen*/
      {
        jjtn002.symbol = t.image;
        jjtn002.line = t.beginLine;
      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  2);
        }
      }
/*@egen*/       
    | <BRACKETOPEN> Expression() <BRACKETCLOSE> [Expr2()]
    | Expr3()[Expr2()]
}

void Expr3()     : {Token t;}
{
     t=<MINOR>VarTerm()[Expr3()]/*@bgen(jjtree) #OP3( 2) */
      {
        SimpleNode jjtn001 = new SimpleNode(JJTOP3);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtc001 = false;
      }
/*@egen*/
      {
        jjtn001.symbol = t.image;
        jjtn001.line = t.beginLine;
      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
/*@egen*/       
      | Expr4()[Expr3()]
}

void Expr4()     : {Token t;}
{
     t=<OPERATORSLOW>VarTerm()[Expr4()]/*@bgen(jjtree) #OP4( 2) */
      {
        SimpleNode jjtn001 = new SimpleNode(JJTOP4);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtc001 = false;
      }
/*@egen*/
      {
        jjtn001.symbol = t.image;
        jjtn001.line = t.beginLine;
      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
/*@egen*/       
      | Expr5()[Expr4()]
}

void Expr5()     : {Token t;}
{
     t=<OPERATORSHIGH>VarTerm()/*@bgen(jjtree) #OP5( 2) */
      {
        SimpleNode jjtn001 = new SimpleNode(JJTOP5);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtc001 = false;
      }
/*@egen*/
      {
        jjtn001.symbol = t.image;
        jjtn001.line = t.beginLine;
      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
/*@egen*/       
}

void FullStop()          : {/*@bgen(jjtree) PAREMETER */
                            SimpleNode jjtn000 = new SimpleNode(JJTPAREMETER);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) PAREMETER */
  try {
/*@egen*/
  (<FULLSTOP> (t=<LENGTH> [Expr2()] |
  t=<IDENTIFIER> <ROUNDBRACKETOPEN> [Expression()(<COMMA> Expression())*]  <ROUNDBRACKETCLOSED> [Expr2()]))/*@bgen(jjtree)*/
                                                                                                           {
                                                                                                             jjtree.closeNodeScope(jjtn000, true);
                                                                                                             jjtc000 = false;
                                                                                                           }
/*@egen*/{
    jjtn000.symbol = t.image;
    jjtn000.line = t.beginLine;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VarTerm()     : {Token t;Token open = new Token();Token close = new Token();}
{
    t=<INTEGERLITERAL>/*@bgen(jjtree) VAL */
      {
        SimpleNode jjtn001 = new SimpleNode(JJTVAL);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn001, true);
        jjtc001 = false;
      }
/*@egen*/
      {
        jjtn001.symbol = t.image;
        jjtn001.line = t.beginLine;
      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
/*@egen*/    
    | t=<IDENTIFIER>/*@bgen(jjtree) TEXT */
      {
        SimpleNode jjtn002 = new SimpleNode(JJTTEXT);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn002, true);
        jjtc002 = false;
      }
/*@egen*/
      {
        jjtn002.symbol = t.image;
        jjtn002.line = t.beginLine;
      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
/*@egen*/     
    |/*@bgen(jjtree) TRUE */
      {
        SimpleNode jjtn003 = new SimpleNode(JJTTRUE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/ <TRUE>/*@bgen(jjtree)*/
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
      }
/*@egen*/      
    |/*@bgen(jjtree) FALSE */
      {
        SimpleNode jjtn004 = new SimpleNode(JJTFALSE);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      }
      try {
/*@egen*/ <FALSE>/*@bgen(jjtree)*/
      } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004, true);
        }
      }
/*@egen*/       
    |/*@bgen(jjtree) THIS */
      {
        SimpleNode jjtn005 = new SimpleNode(JJTTHIS);
        boolean jjtc005 = true;
        jjtree.openNodeScope(jjtn005);
      }
      try {
/*@egen*/ <THIS>/*@bgen(jjtree)*/
      } finally {
        if (jjtc005) {
          jjtree.closeNodeScope(jjtn005, true);
        }
      }
/*@egen*/      
    | <NEW> (t=<INT> open=<BRACKETOPEN> Expression() close=<BRACKETCLOSE>/*@bgen(jjtree) #NEW( 1) */
                                                                          {
                                                                            SimpleNode jjtn006 = new SimpleNode(JJTNEW);
                                                                            boolean jjtc006 = true;
                                                                            jjtree.openNodeScope(jjtn006);
                                                                          }
                                                                          try {
/*@egen*//*@bgen(jjtree)*/
                                                                          {
                                                                            jjtree.closeNodeScope(jjtn006,  1);
                                                                            jjtc006 = false;
                                                                          }
/*@egen*/ {
      jjtn006.symbol = t.image;
      jjtn006.line = t.beginLine;
    }/*@bgen(jjtree)*/
                                                                          } finally {
                                                                            if (jjtc006) {
                                                                              jjtree.closeNodeScope(jjtn006,  1);
                                                                            }
                                                                          }
/*@egen*/       
    | t=<IDENTIFIER> open=<ROUNDBRACKETOPEN> close=<ROUNDBRACKETCLOSED>/*@bgen(jjtree) NEW */
    {
      SimpleNode jjtn007 = new SimpleNode(JJTNEW);
      boolean jjtc007 = true;
      jjtree.openNodeScope(jjtn007);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn007, true);
      jjtc007 = false;
    }
/*@egen*/
    {
      jjtn007.symbol = t.image;
      jjtn007.line = t.beginLine;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc007) {
        jjtree.closeNodeScope(jjtn007, true);
      }
    }
/*@egen*/    
    )
    | <NOT>/*@bgen(jjtree) #NOT( 1) */
            {
              SimpleNode jjtn008 = new SimpleNode(JJTNOT);
              boolean jjtc008 = true;
              jjtree.openNodeScope(jjtn008);
            }
            try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
            } catch (Throwable jjte008) {
              if (jjtc008) {
                jjtree.clearNodeScope(jjtn008);
                jjtc008 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte008 instanceof RuntimeException) {
                throw (RuntimeException)jjte008;
              }
              if (jjte008 instanceof ParseException) {
                throw (ParseException)jjte008;
              }
              throw (Error)jjte008;
            } finally {
              if (jjtc008) {
                jjtree.closeNodeScope(jjtn008,  1);
              }
            }
/*@egen*/        
    | <ROUNDBRACKETOPEN> Expression() <ROUNDBRACKETCLOSED>
}
